---
layout: base.njk
title: User Profile
user:
  firstName: "John"
  lastName: "Doe"
  email: "john.doe@example.com"
  username: "johndoe"
  phone: "+1234567890"
  accountType: "premium"
  subscription:
    status: 'active'
    type: "monthly"
    lastPaymentDate: "2023-10-15"
    amount: "$9.99"
    expiryDate: "2023-11-15"
    renewalAmount: "$9.99"
---

<div class="flex h-full">
    <!-- Sidebar -->
    {% include "sidebar.njk" %}

    <!-- Mobile sidebar toggle -->
    <button id="sidebar-toggle" class="md:hidden fixed bottom-4 right-4 bg-blue-600 text-white p-3 rounded-full shadow-lg z-50">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
    </button>

    <!-- Main content -->
    <main class="flex-1 overflow-auto">
        <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Profile Header -->
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Profile Settings</h1>
                    <p class="text-sm text-gray-500 mt-1">Manage your account information and subscription</p>
                </div>
                <div class="mt-4 sm:mt-0">
                    <!-- basic title -->
                    <span id="basic-title" class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800"> 
                        Basic Account
                    </span>
                    <!-- prmium title  -->
                    <span id="premium-title" class="hidden inline-flex items-center px-3 py-1 rounded-full text-sm font-medium
                                bg-gradient-to-r from-purple-500 to-pink-500 text-white"> 
                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z" clip-rule="evenodd"/>
                            <path d="M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z"/>
                        </svg>
                        Premium Account
                    </span>
                </div>
            </div>

            <!-- Profile Card -->
            <div class="bg-white shadow rounded-lg divide-y divide-gray-200 mb-8">
                <!-- Personal Info Section -->
                <div class="px-6 py-5">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Personal Information</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-500">First Name</label>
                            <p id="first_name" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Last Name</label>
                            <p id="last_name" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Email</label>
                            <p id="email" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Username</label>
                            <p id="username" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Phone Number</label>
                            <p id="phone" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <!-- for resume credits -->
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Resume Credits</label>
                            <p id="resume-credits" class="mt-1 text-sm text-gray-900">null</p>
                        </div>
                    </div>
                </div>

                <!-- Subscription Section (for premium users) -->
                
                <div id="subscription-info" class="hidden px-6 py-5">
                    <h2 class="text-lg font-medium text-gray-900 mb-4">Subscription Details</h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Subscription Status</label>
                            <p id="sub-status" class="mt-1 text-sm text-gray-900 capitalize"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Subscription Type</label>
                            <p id="sub-type" class="mt-1 text-sm text-gray-900 capitalize"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Last Payment Date</label>
                            <p id="sub-payment-date" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Subscription Amount</label>
                            <p id="sub-amount" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Expiry Date</label>
                            <p id="sub-expiry" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Renewal Amount</label>
                            <p id="sub-renew-amount" class="mt-1 text-sm text-gray-900"></p>
                        </div>
                        <!-- <div>
                            <label class="block text-sm font-medium text-gray-500">Autorenewal</label>
                            <p id="sub-renewal" class="mt-1 text-sm text-gray-900"></p>
                        </div> -->
                    </div>
                </div>
                
            </div>

            <!-- Action Buttons -->
            <div class="space-y-4">
                <div id="basic-action-btns">
                    <a href="/premium" class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500">
                        <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M5 5a3 3 0 015-2.236A3 3 0 0114.83 6H16a2 2 0 110 4h-5V9a1 1 0 10-2 0v1H4a2 2 0 110-4h1.17C5.06 5.687 5 5.35 5 5zm4 1V5a1 1 0 10-1 1h1zm3 0a1 1 0 10-1-1v1h1z" clip-rule="evenodd"/>
                            <path d="M9 11H3v5a2 2 0 002 2h4v-7zM11 18h4a2 2 0 002-2v-5h-6v7z"/>
                        </svg>
                        Upgrade to Premium
                    </a>
                </div>
                <div id="pro-action-btns" class="hidden">
                    <button type="button" class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-5 h-5 mr-2 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                        </svg>
                        Cancel Subscription
                    </button>

                    <!-- Auto-Renewal Toggle Button -->
                    <button type="button" id="auto-renew-btn" onclick="toggleAutoRenewal()" class="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg id="auto-renew-icon" class="w-5 h-5 mr-2 text-green-500 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                        </svg>
                        <span id="auto-renew-text">Auto-Renew: On</span>
                    </button>
                    <!-- message display -->
                    <span><small id="auto-renew-error-display" class="text-red-500 text-sm"></small></span>
                    <span><small id="auto-renew-success-display" class="text-green-500 text-sm"></small></span>
                </div>

                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <button type="button" onclick="openUserSettingsModal('password')"
                        class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-5 h-5 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                        </svg>
                        Change Password
                    </button>

                    <button type="button" onclick="openUserSettingsModal('profile')"
                            class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-5 h-5 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                        Update Profile Information
                    </button>
                </div>
            </div>
        </div>
    </main>
</div>

<!-- modal dialog -->
<div class="relative z-50 hidden" id="user-settings-modal" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
    <div class="fixed inset-0 z-50 overflow-y-auto">
      <div class="flex min-h-full items-end justify-center p-4 sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
          <!-- Tab Navigation -->
          <div class="border-b border-gray-200">
            <nav class="-mb-px flex space-x-8">
              <button id="profile-tab" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">Profile Information</button>
              <button id="password-tab" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">Change Password</button>
            </nav>
          </div>
  
          <!-- Profile Information Form -->
          <div id="profile-form" class="mt-5">
            <form id="update-profile-form">
              <div class="space-y-4">
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700">Email address</label>
                  <input type="email" name="email" id="form-email" autocomplete="email" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                </div>
                
                <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <label for="first-name" class="block text-sm font-medium text-gray-700">First name</label>
                    <input type="text" name="first-name" id="form-first-name" autocomplete="given-name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                  </div>
                  <div>
                    <label for="last-name" class="block text-sm font-medium text-gray-700">Last name</label>
                    <input type="text" name="last-name" id="form-last-name" autocomplete="family-name" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                  </div>
                </div>
                
                <div>
                  <label for="phone" class="block text-sm font-medium text-gray-700">Phone number</label>
                  <input type="tel" name="phone" id="form-phone" autocomplete="tel" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                </div>
              </div>
              
              <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                <button type="button" id="cancel-profile" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:col-start-1 sm:mt-0 sm:text-sm">Cancel</button>
                <button type="submit" id="update-profile-btn" class="inline-flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 sm:col-start-2 sm:text-sm">Update Profile</button>
              </div>
            </form>
          </div>
  
          <!-- Change Password Form -->
          <div id="password-form" class="hidden mt-5">
            <form id="change-password-form">
              <div class="space-y-4">
                <!-- <div>
                  <label for="current-password" class="block text-sm font-medium text-gray-700">Current password</label>
                  <input type="password" name="current-password" id="current-password" autocomplete="current-password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                </div> -->
                <label for="current-password" class="block text-sm font-medium text-gray-700">Current password</label>
                <div class="relative">
                  <input type="password" name="current-password" id="current-password" autocomplete="current-password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                  <button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 hover:text-gray-700 focus:outline-none" data-password-toggle="current-password">
                        <!-- Eye icon for hidden password -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 eye-icon" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                        <!-- Eye slash icon for visible password (hidden by default) -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 eye-slash-icon hidden" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                            <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                        </svg>
                    </button>
                </div>
                
                <!-- <div>
                  <label for="new-password" class="block text-sm font-medium text-gray-700">New password</label>
                  <input type="password" name="new-password" id="new-password" autocomplete="new-password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                  <p class="mt-1 text-xs text-gray-500">Minimum 8 characters with at least one number and one letter</p>
                </div> -->

                <label for="new-password" class="block text-sm font-medium text-gray-700">New password</label>
                <div class="relative">
                  <input type="password" name="new-password" id="new-password" autocomplete="new-password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                  <button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 hover:text-gray-700 focus:outline-none" data-password-toggle="new-password">
                        <!-- Eye icon for hidden password -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 eye-icon" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                        <!-- Eye slash icon for visible password (hidden by default) -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 eye-slash-icon hidden" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                            <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                        </svg>
                    </button>
                </div>
                <p class="mt-1 text-xs text-gray-500">Minimum 8 characters with at least one number and one letter</p>
                
                <!-- <div>
                  <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm new password</label>
                  <input type="password" name="confirm-password" id="confirm-password" autocomplete="new-password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                </div> -->
                
                <label for="confirm-password" class="block text-sm font-medium text-gray-700">Confirm new password</label>
                <div class="relative">
                  <input type="password" name="confirm-password" id="confirm-password" autocomplete="new-password" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm py-2 px-3 border">
                  <button type="button" class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 hover:text-gray-700 focus:outline-none" data-password-toggle="confirm-password">
                        <!-- Eye icon for hidden password -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 eye-icon" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                        </svg>
                        <!-- Eye slash icon for visible password (hidden by default) -->
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 eye-slash-icon hidden" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd" />
                            <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z" />
                        </svg>
                    </button>
                </div>
              </div>
              
              <div class="mt-5 sm:mt-6 sm:grid sm:grid-flow-row-dense sm:grid-cols-2 sm:gap-3">
                <button type="button" id="cancel-password" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:col-start-1 sm:mt-0 sm:text-sm">Cancel</button>
                <button type="submit" id="change-password-btn" class="inline-flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 sm:col-start-2 sm:text-sm">Change Password</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

{% block extra_js %}
<script>
  let autoRenewEnabled = true;
  let user = {};
  document.addEventListener('DOMContentLoaded', () => {
        const basicTitle = document.getElementById('basic-title');
        const proTitle = document.getElementById('premium-title');
        const subscriptionSection = document.getElementById('subscription-info');
        const proActionBtnDiv = document.getElementById('pro-action-btns');
        const basicActionBtnDiv = document.getElementById('basic-action-btns');

        // user object
        user = API.getUser();
        document.getElementById('first_name').textContent = user.first_name;
        document.getElementById('last_name').textContent = user.last_name;
        document.getElementById('email').textContent = user.email;
        document.getElementById('phone').textContent = user.phone_number;
        document.getElementById('username').textContent = user.username;
        document.getElementById('resume-credits').textContent = user.resume_credits;

        // set account type title
        if (user.account_type == 'premium'){
            basicTitle.classList.add('hidden');
            proTitle.classList.remove('hidden');

            //populate subscription elements
            document.getElementById('sub-status').textContent = user.subscriptions.status;
            document.getElementById('sub-amount').textContent = user.subscriptions.amount;
            document.getElementById('sub-renew-amount').textContent = user.subscriptions.renewalAmount;
            document.getElementById('sub-expiry').textContent = user.subscriptions.expiryDate;
            document.getElementById('sub-type').textContent = user.subscriptions.type;
            document.getElementById('sub-payment-date').textContent = user.subscriptions.lastPaymentDate;
            autoRenewEnabled = user.subscriptions.is_auto_renew
            // document.getElementById('sub-renewal').textContent = autoRenewEnabled? "Enabled" : 'Disabled';

            // subscription section
            subscriptionSection.classList.remove('hidden');
            proActionBtnDiv.classList.remove('hidden');
            basicActionBtnDiv.classList.add('hidden');
        } else{
            basicTitle.classList.remove('hidden');
            proTitle.classList.add('hidden');

            // subscription section
            subscriptionSection.classList.add('hidden');
            proActionBtnDiv.classList.add('hidden');
            basicActionBtnDiv.classList.remove('hidden');
        }

        
    });

    //Auto renew toggle function
    let isProcessing = false;

    async function toggleAutoRenewal() {
      if (isProcessing) return;
      isProcessing = true;
      
      const btn = document.getElementById('auto-renew-btn');
      const icon = document.getElementById('auto-renew-icon');
      const text = document.getElementById('auto-renew-text');
      const errorDisplay = document.getElementById('auto-renew-error-display');
      const successDisplay = document.getElementById('auto-renew-success-display');
      
      // Disable button during processing
      btn.disabled = true;
      errorDisplay.textContent = '';
      successDisplay.textContent = '';
      
      // Start rotation
      icon.classList.add('rotate-animation');
      
      try {
          // Add delay before making the API call
          await new Promise(resolve => setTimeout(resolve, 2000));

          const success = await updateAutoRenewalStatus(!autoRenewEnabled);
          
          if (success) {
              // Update state only after successful API call
              autoRenewEnabled = !autoRenewEnabled;
              
              // Update UI
              if (autoRenewEnabled) {
                  icon.classList.remove('text-gray-500', 'rotate-animation');
                  icon.classList.add('text-green-500');
                  text.textContent = 'Auto-Renew: On';
                  btn.classList.remove('bg-gray-100');
                  btn.classList.add('bg-white');
              } else {
                  icon.classList.remove('text-green-500', 'rotate-animation');
                  icon.classList.add('text-gray-500');
                  text.textContent = 'Auto-Renew: Off';
                  btn.classList.remove('bg-white');
                  btn.classList.add('bg-gray-100');
              }
          } else {
              throw new Error('Failed to update auto renewal state');
          }
      } catch (error) {
          errorDisplay.textContent = error.message;
          icon.classList.remove('rotate-animation');
      } finally {
          btn.disabled = false;
          isProcessing = false;
      }
    }

  // Actual API function
  async function updateAutoRenewalStatus(newStatus) {
      try {
          const response = await API.request('/api/auth/subscription/', 'PUT', {
              subscriptionAutoRenewal: newStatus
          });
          
          if (!response.ok) throw new Error(response.statusText);
          const data = await response.json();
          if (data.status !== 1) throw new Error(data.message);

          // Store user data
          API.setUser(data.user);
          
          document.getElementById('auto-renew-success-display').textContent = data.message;
          return true;
      } catch (error) {
          console.error('API Error:', error);
          throw error; // Re-throw to be caught in toggleAutoRenewal
      }
  }

  // Modal control functions
  function openUserSettingsModal(initialTab = 'profile') {
    const modal = document.getElementById('user-settings-modal');
    modal.classList.remove('hidden');
    
    // Load user data
    loadUserData();
    
    // Show initial tab
    switchTab(initialTab);
    
    // Trap focus within modal
    modal.addEventListener('keydown', trapTabKey);
  }

  function closeUserSettingsModal() {
    const modal = document.getElementById('user-settings-modal');
    modal.classList.add('hidden');
    modal.removeEventListener('keydown', trapTabKey);
  }

  function switchTab(tabName) {
    if (tabName === 'profile') {
      document.getElementById('profile-tab').classList.add('border-blue-500', 'text-blue-600');
      document.getElementById('profile-tab').classList.remove('border-transparent', 'text-gray-500');
      document.getElementById('password-tab').classList.add('border-transparent', 'text-gray-500');
      document.getElementById('password-tab').classList.remove('border-blue-500', 'text-blue-600');
      document.getElementById('profile-form').classList.remove('hidden');
      document.getElementById('password-form').classList.add('hidden');
    } else {
      document.getElementById('password-tab').classList.add('border-blue-500', 'text-blue-600');
      document.getElementById('password-tab').classList.remove('border-transparent', 'text-gray-500');
      document.getElementById('profile-tab').classList.add('border-transparent', 'text-gray-500');
      document.getElementById('profile-tab').classList.remove('border-blue-500', 'text-blue-600');
      document.getElementById('password-form').classList.remove('hidden');
      document.getElementById('profile-form').classList.add('hidden');
    }
  }

  // Load user data into form
  function loadUserData() {
    if (user) {
      document.getElementById('form-email').value = user.email || '';
      document.getElementById('form-first-name').value = user.first_name || '';
      document.getElementById('form-last-name').value = user.last_name || '';
      document.getElementById('form-phone').value = user.phone_number || '';
    }
  }

  // Form submission handlers
  document.getElementById('update-profile-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    toggleButtonSpinner('update-profile-btn', 'Update Profile', true);
    await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate 2 seconds delay
    
    const form = e.target;
    // const submitButton = form.querySelector('button[type="submit"]');
    // submitButton.disabled = true;
    
    try {
      const response = await API.request('/api/auth/profile/', 'POST', {
        email: form.email.value,
        firstName: form['first-name'].value,
        lastName: form['last-name'].value,
        phone: form.phone.value
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.status === 1){
          API.setUser(data.user);
          showToast(data.message, 'success');
          closeUserSettingsModal();

          // Add delay before making the API call
          await new Promise(resolve => setTimeout(resolve, 2000));
          window.location.reload();

        } else throw new Error(data.message);
      } else {
        throw new Error('Failed to update profile');
      }
    } catch (error) {
      showToast(error.message, 'error');
    } finally {
      toggleButtonSpinner('update-profile-btn', 'Update Profile', false);
    }
});

document.getElementById('change-password-form').addEventListener('submit', async (e) => {
  e.preventDefault();

  toggleButtonSpinner('change-password-btn', 'Changing Password', true);
  await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate 2 seconds delay
  
  const form = e.target;
  // const submitButton = form.querySelector('button[type="submit"]');
  // submitButton.disabled = true;
  
  if (form['new-password'].value !== form['confirm-password'].value) {
    showToast('New passwords do not match', 'error');
    submitButton.disabled = false;
    return;
  }
  
  try {
    const response = await API.request('/api/auth/profile/', 'PUT', {
      currentPassword: form['current-password'].value,
      newPassword: form['new-password'].value
    });
    
    if (response.ok) {
       const data = await response.json();
       if (data.status === 1){
        showToast(data.message, 'success');
        form.reset();
        closeUserSettingsModal();
       } else throw new Error(data.message);
    } else {
      const error = await response.json();
      throw new Error(error.message || 'Failed to change password');
    }
  } catch (error) {
    showToast(error.message, 'error');
  } finally {
    toggleButtonSpinner('change-password-btn', 'Change Password', false);
  }
});

// Event listeners
document.getElementById('profile-tab').addEventListener('click', () => switchTab('profile'));
document.getElementById('password-tab').addEventListener('click', () => switchTab('password'));
document.getElementById('cancel-profile').addEventListener('click', closeUserSettingsModal);
document.getElementById('cancel-password').addEventListener('click', closeUserSettingsModal);

// Accessibility: Trap tab key within modal
function trapTabKey(e) {
  if (e.key === 'Tab') {
    const modal = document.getElementById('user-settings-modal');
    const focusableElements = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
    const firstElement = focusableElements[0];
    const lastElement = focusableElements[focusableElements.length - 1];
    
    if (e.shiftKey) {
      if (document.activeElement === firstElement) {
        lastElement.focus();
        e.preventDefault();
      }
    } else {
      if (document.activeElement === lastElement) {
        firstElement.focus();
        e.preventDefault();
      }
    }
  }
}

// Helper function to show notifications
function showToast(message, type = 'info') {
  // Implement your toast notification system here
  console.log(`${type}: ${message}`);
}
</script>
{% endblock %}