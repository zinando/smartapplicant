---
layout: base.njk
title: Admin Password Reset
---

<div class="flex h-full">
  {% include "sidebar.njk" %}

  <!-- Mobile sidebar toggle -->
    <button id="sidebar-toggle" class="md:hidden fixed bottom-4 right-4 bg-blue-600 text-white p-3 rounded-full shadow-lg z-50">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
    </button>
  
  <main class="flex-1 overflow-auto md:ml-64">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 class="text-2xl font-bold text-gray-900 mb-6">Admin Password Reset</h1>
      
      <!-- Email Search Form -->
      <div class="bg-white shadow rounded-lg p-6 mb-8">
        <form id="searchForm" class="space-y-4">
          <div>
            <label for="userEmail" class="block text-sm font-medium text-gray-700 mb-1">
              Enter User Email
            </label>
            <input type="email" id="userEmail" required
                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-2 px-3 border">
          </div>
          <button type="submit" id="user-email-search-button"
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700">
            Search User
          </button>
        </form>
      </div>

      <!-- User Details Table (Initially Hidden) -->
      <div id="userDetailsSection" class="hidden bg-white shadow rounded-lg p-6 mb-8">
        <h2 class="text-lg font-medium text-gray-900 mb-4">User Information</h2>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <tbody id="userDataTable" class="bg-white divide-y divide-gray-200">
              <!-- Dynamically populated -->
            </tbody>
          </table>
        </div>
      </div>

      <!-- Password Update Form (Initially Hidden) -->
      <div id="passwordForm" class="hidden bg-white shadow rounded-lg p-6">
        <form id="updatePasswordForm" class="space-y-4">
          <input type="hidden" id="userId">
          <div>
            <label for="newPassword" class="block text-sm font-medium text-gray-700 mb-1">
              New Password
            </label>
            <input type="password" id="newPassword" required minlength="8"
                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-2 px-3 border"
                   placeholder="Minimum 8 characters">
          </div>
          <div>
            <label for="confirmPassword" class="block text-sm font-medium text-gray-700 mb-1">
              Confirm Password
            </label>
            <input type="password" id="confirmPassword" required
                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-2 px-3 border">
          </div>
          <button type="submit" id="updatePasswordButton"
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700">
            Update Password
          </button>
        </form>
      </div>

      <!-- Status Messages -->
      <div id="statusMessage" class="hidden mt-4 p-4 rounded-md"></div>
    </div>
  </main>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const searchForm = document.getElementById('searchForm');
  const updateForm = document.getElementById('updatePasswordForm');
  const userDetailsSection = document.getElementById('userDetailsSection');
  const passwordForm = document.getElementById('passwordForm');
  const statusMessage = document.getElementById('statusMessage');
  const searBtn = document.getElementById('user-email-search-button');

  // Search for user by email
  searchForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = document.getElementById('userEmail').value;

    // validate email
    if (!email || !/\S+@\S+\.\S+/.test(email)) {
      showToast('Please enter a valid email address', 'error');
      return;
    }

    toggleButtonSpinner('user-email-search-button', btnText='Searching...', isLoading=true, loadingText='Searching for user...');
    // delay for 2 seconds to simulate loading
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    try {
      const response = await API.request(`/api/auth/change-user-password/${email}/`, 'GET');

      if (!response.ok) {
        throw new Error(response.statusText || 'Request failed, please try again later');
      }

      const data = await response.json();

      if (data.status === 1) {
        // Display user details
        document.getElementById('userId').value = data.user.id;
        const userTable = document.getElementById('userDataTable');

        if (!userTable) {
          throw new Error('User data table not found');
        }
        userTable.innerHTML = ''; // Clear previous data

        userTable.innerHTML = `
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Name</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${data.user.first_name} ${data.user.last_name}</td>
          </tr>
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Email</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${data.user.email}</td>
          </tr>
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Phone</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${data.user.phone_number || 'N/A'}</td>
          </tr>
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Account Type</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${data.user.account_type}</td>
          </tr>
          <tr class="hover:bg-gray-50">
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Resume Credits</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${data.user.resume_credits}</td>
          </tr>
        `;

        userDetailsSection.classList.remove('hidden');
        passwordForm.classList.remove('hidden');
        showStatus('User found. Please set a new password.', 'success');
        toggleButtonSpinner('user-email-search-button', btnText='Search User', isLoading=false);
        // hide the search button
        searBtn.classList.add('hidden');
      } else {
        throw new Error(data.message || 'User not found');
      }
    } catch (error) {
        toggleButtonSpinner('user-email-search-button', btnText='Search User', isLoading=false);
        showToast(error.message, 'error');
    }
  });

  // Update password
  updateForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const newPassword = document.getElementById('newPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    const userId = document.getElementById('userId').value;
    const userEmail = document.getElementById('userEmail').value;

    if (newPassword !== confirmPassword) {
      showToast('Passwords do not match', 'error');
      return;
    }
    if (newPassword.length < 8) {
      showToast('Password must be at least 8 characters long', 'error');
      return;
    }
    // check if password contains at least one uppercase letter, one lowercase letter, one number and one special character
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$!%*?&])[A-Za-z\d@#$!%*?&]{8,}$/;
    if (!passwordRegex.test(newPassword)) {
      showToast('Password must contain at least one uppercase letter, one lowercase letter, one number and one special character', 'error');
      return;
    }
    toggleButtonSpinner('updatePasswordButton', btnText='Update Password', isLoading=true, loadingText='Updating password...');
    try {
      const response = await API.request(`/api/auth/change-user-password/${userEmail}/`, 'POST', {
        new_password: newPassword,
        user_id: userId
      });

      if (!response.ok) {
        throw new Error(response.statusText || 'Request failed, please try again later');
      }

      const data = await response.json();

      if (data.status === 1) {
        showToast('Password updated successfully.', 'success');
        updateForm.reset();
        userDetailsSection.classList.add('hidden');
        passwordForm.classList.add('hidden');
        document.getElementById('userEmail').value = '';
        searBtn.classList.remove('hidden');
      } else {
        throw new Error(data.message || 'Failed to update password');
      }
    } catch (error) {
      showToast(error.message, 'error');
    } finally {
      toggleButtonSpinner('updatePasswordButton', btnText='Update Password', isLoading=false);
    }
  });

    // Show status message
    function showStatus(message, type) {
        statusMessage.className = `mt-4 p-4 rounded-md text-sm ${type === 'success' ? 'bg-green-50 text-green-700' : 'bg-red-50 text-red-700'}`;
        statusMessage.textContent = message;
        statusMessage.classList.remove('hidden');
        setTimeout(() => {
            statusMessage.classList.add('hidden');
        }, 5000);
    }

});
</script>