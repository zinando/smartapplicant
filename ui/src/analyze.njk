---
layout: base.njk
title: Analyze Resume
---

<div class="flex h-full">
    <!-- Sidebar -->
    {% include "sidebar.njk" %}

    <!-- Mobile sidebar toggle -->
    <button id="sidebar-toggle" class="md:hidden fixed bottom-4 right-4 bg-blue-600 text-white p-3 rounded-full shadow-lg z-50">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
    </button>

    <main class="relative h-full w-full lg:w-4/5">
        <!-- Compact Fixed Form Section -->
        <div class="bg-white border-b border-gray-200 shadow-sm px-4 sm:px-6 lg:px-8 py-4"> <!--i removed 'sticky top-0 z-10' from the class list-->
            <h2 class="text-lg font-semibold text-gray-900 mb-3">Resume Analysis</h2>
            
            <form id="analysis-form" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Resume Selection -->
                    <div>
                        <label for="resume-select" class="block text-xs font-medium text-gray-700 mb-1">Select Resume</label>
                        <select id="resume-select" class="block w-full text-sm rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-1.5 px-2.5 border">
                            <option value="">-- Select --</option>
                        </select>
                    </div>
    
                    <!-- Job Title -->
                    <div>
                        <label for="job-title" class="block text-xs font-medium text-gray-700 mb-1">Job Title</label>
                        <input type="text" id="job-title" class="block w-full text-sm rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-1.5 px-2.5 border" placeholder="Software Engineer">
                    </div>
                </div>
    
                <!-- Job Description -->
                <div>
                    <label for="job-description" class="block text-xs font-medium text-gray-700 mb-1">Job Description</label>
                    <textarea id="job-description" rows="3" class="block w-full text-sm rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 py-1.5 px-2.5 border" placeholder="Paste job description..."></textarea>
                </div>
                
                <!-- Error Display -->
                <div id="results" class="text-xs text-red-600 mt-1"></div>
    
                <!-- Submit Buttons -->
                <div class="flex justify-end pt-1 space-x-3">
                    <button type="button" id="generate-resume-btn" class="hidden items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-blue-600 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-blue-500">
                        Generate a matching resume for this job
                    </button>
                    <button type="submit" id="analyze-btn" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-blue-500">
                        <span id="btn-text">Analyze</span>
                        <span id="spinner" class="hidden ml-1.5 h-3.5 w-3.5 border-2 border-white border-t-transparent rounded-full animate-spin"></span>
                    </button>
                </div>
            </form>
        </div>
    
        <!-- Enhanced Scrollable Results Section -->
        <div class="px-4 sm:px-6 lg:px-8 py-4"> <!--i removed 'overflow-y-auto h-[calc(100vh-220px)]' from the class list-->
            <!-- Empty State -->
            <div id="empty-state" class="bg-white rounded-lg shadow-sm border border-gray-200 p-8 text-center">
                <svg class="mx-auto h-10 w-10 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
                <h3 class="mt-2 text-base font-medium text-gray-900">Ready to Analyze</h3>
                <p class="mt-1 text-xs text-gray-500">Fill out the form above to begin analysis</p>
            </div>
    
            <!-- Results Section -->
            <div id="results-section" class="hidden space-y-6">
                <!-- Results content remains unchanged -->
                <!-- Basic Analytics -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Basic Resume Analysis</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <!-- ATS Score Card -->
                        <div class="bg-blue-50 rounded-lg p-6 border border-blue-100">
                            <h3 class="text-lg font-medium text-blue-800 mb-2">ATS Score</h3>
                            <div class="flex items-center justify-center my-4">
                                <div class="relative w-32 h-32">
                                    <svg class="w-full h-full" viewBox="0 0 36 36">
                                        <path d="M18 2.0845
                                            a 15.9155 15.9155 0 0 1 0 31.831
                                            a 15.9155 15.9155 0 0 1 0 -31.831"
                                            fill="none"
                                            stroke="#E5E7EB"
                                            stroke-width="3"
                                        />
                                        <path id="ats-score-circle" d="M18 2.0845
                                            a 15.9155 15.9155 0 0 1 0 31.831
                                            a 15.9155 15.9155 0 0 1 0 -31.831"
                                            fill="none"
                                            stroke="#2563EB"
                                            stroke-width="3"
                                            stroke-dasharray="78, 100"
                                            stroke-linecap="round"
                                        />
                                    </svg>
                                    <div class="absolute top-0 left-0 w-full h-full flex items-center justify-center">
                                        <span id="ats-score-value" class="text-2xl font-bold text-blue-800">78%</span>
                                    </div>
                                </div>
                            </div>
                            <p id="ats-score-description" class="text-sm text-blue-700 text-center">Better than 65% of analyzed resumes</p>
                        </div>
    
                        <!-- Sectional Analysis -->
                        <div class="col-span-2">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Sectional Analysis</h3>
                            <div class="space-y-4" id="sectional-analysis">
                                <!-- Will be populated by JavaScript -->
                                <div class="animate-pulse">
                                    <div class="h-4 bg-gray-200 rounded w-1/4 mb-2"></div>
                                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                                        <div class="bg-blue-600 h-2.5 rounded-full" style="width: 45%"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
    
                    <!-- Improvement Suggestions -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Improvement Suggestions</h3>
                        <ul class="space-y-3" id="basic-suggestions">
                            <!-- Will be populated by JavaScript -->
                            <li class="animate-pulse flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 text-blue-500 mt-0.5">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </div>
                                <div class="ml-2">
                                    <div class="h-4 bg-gray-200 rounded w-full"></div>
                                    <div class="h-4 bg-gray-200 rounded w-3/4 mt-2"></div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
    
                <!-- Job Matching Analytics -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Job Matching Analysis</h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <!-- Suitability Score -->
                        <div class="bg-indigo-50 rounded-lg p-6 border border-indigo-100">
                            <h3 class="text-lg font-medium text-indigo-800 mb-2">Suitability Score</h3>
                            <div class="flex items-center justify-center my-4">
                                <div class="relative w-32 h-32">
                                    <svg class="w-full h-full" viewBox="0 0 36 36">
                                        <path d="M18 2.0845
                                            a 15.9155 15.9155 0 0 1 0 31.831
                                            a 15.9155 15.9155 0 0 1 0 -31.831"
                                            fill="none"
                                            stroke="#E5E7EB"
                                            stroke-width="3"
                                        />
                                        <path id="suitability-score-circle" d="M18 2.0845
                                            a 15.9155 15.9155 0 0 1 0 31.831
                                            a 15.9155 15.9155 0 0 1 0 -31.831"
                                            fill="none"
                                            stroke="#4F46E5"
                                            stroke-width="3"
                                            stroke-dasharray="65, 100"
                                            stroke-linecap="round"
                                        />
                                    </svg>
                                    <div class="absolute top-0 left-0 w-full h-full flex items-center justify-center">
                                        <span id="suitability-score-value" class="text-2xl font-bold text-indigo-800">65%</span>
                                    </div>
                                </div>
                            </div>
                            <p id="suitability-score-description" class="text-sm text-indigo-700 text-center">Good match for the position</p>
                        </div>
    
                        <!-- Keyword Coverage -->
                        <div class="col-span-2">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Keyword Coverage</h3>
                            <div class="grid grid-cols-2 md:grid-cols-3 gap-4" id="keyword-coverage">
                                <!-- Will be populated by JavaScript -->
                                <div class="animate-pulse bg-gray-100 rounded p-3">
                                    <div class="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
                                    <div class="h-3 bg-gray-300 rounded w-1/2"></div>
                                </div>
                            </div>
                        </div>
                    </div>
    
                    <!-- Sectional Matching -->
                    <div class="mb-8">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Sectional Matching</h3>
                        <div class="space-y-6" id="sectional-matching">
                            <!-- Will be populated by JavaScript -->
                            <div class="animate-pulse">
                                <div class="h-4 bg-gray-200 rounded w-1/3 mb-3"></div>
                                <div class="space-y-2">
                                    <div class="h-4 bg-gray-200 rounded w-full"></div>
                                    <div class="h-4 bg-gray-200 rounded w-5/6"></div>
                                    <div class="h-4 bg-gray-200 rounded w-2/3"></div>
                                </div>
                            </div>
                        </div>
                    </div>
    
                    <!-- Job-Specific Suggestions -->
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Job-Specific Suggestions</h3>
                        <ul class="space-y-3" id="job-suggestions">
                            <!-- Will be populated by JavaScript -->
                            <li class="animate-pulse flex items-start">
                                <div class="flex-shrink-0 h-5 w-5 text-indigo-500 mt-0.5">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                    </svg>
                                </div>
                                <div class="ml-2">
                                    <div class="h-4 bg-gray-200 rounded w-full"></div>
                                    <div class="h-4 bg-gray-200 rounded w-3/4 mt-2"></div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Template Selection Section -->
            <div id="template-section" class="hidden bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold text-gray-900">Select a Resume Template</h2>
                    <button id="back-to-analysis-btn" class="text-sm text-blue-600 hover:text-blue-800 flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                        </svg>
                        Back to Analysis
                    </button>
                </div>

                <div class="mb-6">
                    <p class="text-sm text-gray-600">Choose a template that best fits your job application. We'll optimize your resume content for the selected job.</p>
                </div>

                <!-- Template Slider -->
                <div class="relative">
                    <div id="template-slider" class="flex overflow-x-auto pb-4 space-x-4 scroll-smooth snap-x snap-mandatory">
                        <!-- Templates will be loaded here -->
                        <div class="animate-pulse bg-gray-200 rounded-lg w-64 h-80 flex-shrink-0"></div>
                    </div>

                    <!-- Navigation Arrows -->
                    <button id="slider-prev" class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 bg-white rounded-full p-2 shadow-md hover:bg-gray-50">
                        <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
                        </svg>
                    </button>
                    <button id="slider-next" class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 bg-white rounded-full p-2 shadow-md hover:bg-gray-50">
                        <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                        </svg>
                    </button>
                </div>

                <!-- Template Preview Modal -->
                <div id="template-modal" class="hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center p-4">
                    <div class="bg-white rounded-lg max-w-4xl w-full max-h-screen overflow-auto">
                        <div class="flex justify-between items-center border-b border-gray-200 p-4">
                            <h3 class="text-lg font-medium text-gray-900" id="modal-template-title">Template Preview</h3>
                            <button id="close-modal" class="text-gray-400 hover:text-gray-500">
                                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                </svg>
                            </button>
                        </div>
                        <div class="p-4">
                            <img id="modal-template-image" src="" alt="Template Preview" class="w-full h-auto">
                        </div>
                        <div class="border-t border-gray-200 px-4 py-3 flex justify-end">
                            <button id="use-template-btn" class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                Use This Template
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Generate Button -->
                <div class="mt-6 flex justify-center">
                    <!-- <button id="generate-optimized-resume-btn" class="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 0v4m0-4h4m-4 0H8m10.5 6.5l-3.5-3.5m0 0l-3.5 3.5m3.5-3.5V18a2.5 2.5 0 01-2.5 2.5h-7A2.5 2.5 0 017 18v-7a2.5 2.5 0 012.5-2.5h7A2.5 2.5 0 0119 11v1"/>
                        </svg>
                        Generate Optimized Resume
                    </button> -->
                    <button type="button" id="generate-optimized-resume-btn" class="inline-flex items-center px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        <span id="btn-text">Generate Optimized Resume</span>
                        <span id="spinner" class="hidden ml-1.5 h-3.5 w-3.5 border-2 border-white border-t-transparent rounded-full animate-spin"></span>
                    </button>
                </div>
            </div>
        </div>
    </main>
</div>

{% block extra_css %}
<link rel="stylesheet" href="/css/templates.css">
{% endblock %}

{% block extra_js %}
<script src="/js/templates.js"></script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Initialize UI elements
    const userData = API.getUser();
    let selectedTemplateId = null;
    const analysisForm = document.getElementById('analysis-form');
    const resultsSection = document.getElementById('results-section');
    const emptyState = document.getElementById('empty-state');
    const analyzeBtn = document.getElementById('analyze-btn');
    const spinner = document.getElementById('spinner');
    const btnText = document.getElementById('btn-text');
    const resumeSelect = document.getElementById('resume-select');
    const jobTitle = document.getElementById('job-title');
    const jobDescription = document.getElementById('job-description');
    const errorDisplay = document.getElementById('results');
    const generateResumeBtn = document.getElementById('generate-resume-btn');
    const generateOptimizedResumeBtn = document.getElementById('generate-optimized-resume-btn');
    const templateSection = document.getElementById('template-section');
    const backToAnalysisBtn = document.getElementById('back-to-analysis-btn');
    const templateSlider = document.getElementById('template-slider');
    const sliderPrev = document.getElementById('slider-prev');
    const sliderNext = document.getElementById('slider-next');
    const templateModal = document.getElementById('template-modal');
    const closeModal = document.getElementById('close-modal');
    const modalTemplateImage = document.getElementById('modal-template-image');
    const modalTemplateTitle = document.getElementById('modal-template-title');
    const useTemplateBtn = document.getElementById('use-template-btn');

    // Check form fields to toggle generate button visibility
    function checkFormFields() {
        const allFilled = resumeSelect.value && jobTitle.value && jobDescription.value;
        generateResumeBtn.classList.toggle('hidden', !allFilled);
    }

    // Load templates into the slider
    // Replace your existing loadTemplates() function with this:
    function loadTemplates() {
        templateSlider.innerHTML = '';
        
        // Group templates by category
        const groupedTemplates = {};
        templates.forEach(template => {
            if (!groupedTemplates[template.category]) {
                groupedTemplates[template.category] = [];
            }
            groupedTemplates[template.category].push(template);
        });
        
        // Create category sections
        templateCategories.forEach(category => {
            if (!groupedTemplates[category.id] || groupedTemplates[category.id].length === 0) return;
            
            const templatesInCategory = groupedTemplates[category.id];
            const showAll = false; // Default to showing only a few
            
            // Create category wrapper
            const categoryWrapper = document.createElement('div');
            categoryWrapper.className = 'template-category flex flex-col w-full flex-shrink-0'; // important classes

            // Category header
            const categoryHeader = document.createElement('div');
            categoryHeader.className = 'category-header flex-shrink-0 py-4';
            // (same innerHTML...)
            categoryHeader.innerHTML = `
                <div class="flex items-center justify-between">
                    <h3 class="text-lg font-medium text-gray-900 flex items-center">
                        <span class="mr-2">${category.icon}</span>
                        ${category.name}
                    </h3>
                    ${templatesInCategory.length > 3 ? `
                    <button onclick="toggleCategoryView('${category.id}', this)" 
                        class="text-sm text-blue-600 hover:text-blue-800">
                        View All
                    </button>` : ''}
                </div>
            `;

            // Template container
            const templatesContainer = document.createElement('div');
            templatesContainer.id = `category-${category.id}`;
            templatesContainer.className = 'template-container flex space-x-4 mb-6 overflow-x-auto pb-2';

            
            // Add templates (limited to 3 initially if more exist)
            const templatesToShow = showAll ? templatesInCategory : templatesInCategory.slice(0, 3);

            templatesToShow.forEach(template => {
                const templateEl = document.createElement('div');
                templateEl.className = `flex-shrink-0 w-64 bg-white rounded-lg border-2 ${selectedTemplateId === template.id ? 'border-blue-500' : 'border-gray-200'} overflow-hidden shadow-sm cursor-pointer template-card`;
                templateEl.setAttribute('data-template-id', template.id);
                templateEl.innerHTML = `
                    <div class="h-48 overflow-hidden" onclick="openTemplateModal('${template.id}')">
                        <img src="${template.thumbnail}" alt="${template.title}" class="w-full h-full object-cover hover:scale-105 transition-transform duration-300">
                    </div>
                    <div class="p-4" onclick="selectTemplate('${template.id}', event)">
                        <h3 class="text-sm font-medium text-gray-900">${template.title}</h3>
                        <p class="text-xs text-gray-500 mt-1">${template.description}</p>
                        <div class="mt-2 flex items-center">
                            <span class="text-xs selection-indicator ${selectedTemplateId === template.id ? 'text-blue-600' : 'text-gray-400'}">
                                ${selectedTemplateId === template.id ? '✓ Selected' : 'Click to select'}
                            </span>
                        </div>
                    </div>
                `;
                templatesContainer.appendChild(templateEl);
            });
            // Append all to wrapper
            categoryWrapper.appendChild(categoryHeader);
            categoryWrapper.appendChild(templatesContainer);

            // Append wrapper to slider
            templateSlider.appendChild(categoryWrapper);
        });
    }

    // Add this new function to toggle category views
    window.toggleCategoryView = function(categoryId, button) {
        const container = document.getElementById(`category-${categoryId}`);
        const categoryTemplates = templates.filter(t => t.category === categoryId);
        
        // Check if we're currently showing all
        const isShowingAll = container.children.length === categoryTemplates.length;
        
        if (isShowingAll) {
            // Show only 3
            container.innerHTML = '';
            categoryTemplates.slice(0, 3).forEach(template => {
                const templateEl = createTemplateElement(template);
                container.appendChild(templateEl);
            });
            button.textContent = 'View All';
        } else {
            // Show all
            container.innerHTML = '';
            categoryTemplates.forEach(template => {
                const templateEl = createTemplateElement(template);
                container.appendChild(templateEl);
            });
            button.textContent = 'Show Less';
        }
    }

    // Helper function to create template elements
    function createTemplateElement(template) {
        const templateEl = document.createElement('div');
        templateEl.className = `flex-shrink-0 w-64 bg-white rounded-lg border-2 ${
            selectedTemplateId === template.id ? 'border-blue-500' : 'border-gray-200'
        } overflow-hidden shadow-sm cursor-pointer template-card`;
        templateEl.setAttribute('data-template-id', template.id); // Add this line
        
        templateEl.innerHTML = `
            <div class="h-48 overflow-hidden" onclick="openTemplateModal('${template.id}')">
                <img src="${template.thumbnail}" alt="${template.title}" class="w-full h-full object-cover hover:scale-105 transition-transform duration-300">
            </div>
            <div class="p-4" onclick="selectTemplate('${template.id}', event)">
                <h3 class="text-sm font-medium text-gray-900">${template.title}</h3>
                <p class="text-xs text-gray-500 mt-1">${template.description}</p>
                <div class="mt-2 flex items-center">
                    <span class="text-xs selection-indicator ${
                        selectedTemplateId === template.id ? 'text-blue-600' : 'text-gray-400'
                    }">
                        ${selectedTemplateId === template.id ? '✓ Selected' : 'Click to select'}
                    </span>
                </div>
            </div>
        `;
        return templateEl;
    }
    
    // Add this new function to handle template selection
    window.selectTemplate = function(templateId, event) {
        // Prevent event bubbling to parent elements
        if (event) event.stopPropagation();
        
        selectedTemplateId = templateId;
        const selectedTemplate = templates.find(t => t.id === templateId);

        const templateCards = document.querySelectorAll('.template-card');
        
        // Update all template cards to show selection state
        templateCards.forEach(card => {
            const cardTemplateId = card.getAttribute('data-template-id');
            
            if (!cardTemplateId) return; // Skip if no template ID
            
            if (cardTemplateId === templateId) {
                card.classList.remove('border-gray-200');
                card.classList.add('border-blue-500');
                const indicator = card.querySelector('.selection-indicator');
                if (indicator) {
                    indicator.textContent = '✓ Selected';
                    indicator.classList.remove('text-gray-400');
                    indicator.classList.add('text-blue-600');
                }
            } else {
                card.classList.remove('border-blue-500');
                card.classList.add('border-gray-200');
                const indicator = card.querySelector('.selection-indicator');
                if (indicator) {
                    indicator.textContent = 'Click to select';
                    indicator.classList.remove('text-blue-600');
                    indicator.classList.add('text-gray-400');
                }
            }
        });
        
        // Update the modal button if open
        if (templateModal && !templateModal.classList.contains('hidden') && selectedTemplate) {
            useTemplateBtn.textContent = `Use This Template (${selectedTemplate.title})`;
        }
    }

    // Open template modal
    window.openTemplateModal = function(templateId) {
        const template = templates.find(t => t.id === templateId);
        if (template) {
            modalTemplateImage.src = template.preview;
            modalTemplateTitle.textContent = `${template.title} Template`;
            useTemplateBtn.textContent = selectedTemplateId === templateId 
                ? `Use This Template (${template.title})` 
                : `Select & Use This Template`;
            templateModal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }
    }

    // Close template modal
    function closeTemplateModal() {
        templateModal.classList.add('hidden');
        document.body.style.overflow = 'auto';
    }

    // Initialize slider navigation
    function initSliderNavigation() {
        // Remove previous event listeners to avoid duplicates
        sliderPrev.replaceWith(sliderPrev.cloneNode(true));
        sliderNext.replaceWith(sliderNext.cloneNode(true));
        
        // Get fresh references
        const freshPrev = document.getElementById('slider-prev');
        const freshNext = document.getElementById('slider-next');
        
        // Horizontal scrolling for all categories together
        freshPrev.addEventListener('click', () => {
            templateSlider.scrollBy({
                left: -300, // Adjust scroll amount as needed
                behavior: 'smooth'
            });
        });
        
        freshNext.addEventListener('click', () => {
            templateSlider.scrollBy({
                left: 300, // Adjust scroll amount as needed
                behavior: 'smooth'
            });
        });
        
        // Update CSS for horizontal scrolling
        templateSlider.style.scrollSnapType = 'x mandatory';
        templateSlider.style.overflowX = 'auto';
        templateSlider.style.overflowY = 'hidden';
        templateSlider.style.display = 'flex'; // Important for horizontal layout
        templateSlider.style.flexDirection = 'row'; // Items in a row
        templateSlider.style.gap = '20px'; // Space between categories
        
        // Make category containers fit content
        document.querySelectorAll('.template-category').forEach(category => {
            category.style.flex = '0 0 auto';
            category.style.width = '100%'; // full width of viewport
            category.style.display = 'flex';
            category.style.flexDirection = 'column'; // stack heading + templates
            category.style.scrollSnapAlign = 'start';
        });
        
        // Make template containers display horizontally
        document.querySelectorAll('.template-container').forEach(container => {
            container.style.display = 'flex'; // ← this was likely missing
            container.style.flexDirection = 'row';
            container.style.overflowX = 'auto';
            container.style.overflowY = 'hidden';
            container.style.gap = '10px';
        });
        
        // Hide arrows when at extremes
        const checkArrows = () => {
            const { scrollLeft, scrollWidth, clientWidth } = templateSlider;
            freshPrev.style.visibility = scrollLeft > 10 ? 'visible' : 'hidden';
            freshNext.style.visibility = scrollLeft < scrollWidth - clientWidth - 10 ? 'visible' : 'hidden';
        };
        
        templateSlider.addEventListener('scroll', checkArrows);
        checkArrows(); // Initial check
    }
    
    // Event listeners for form fields
    [resumeSelect, jobTitle, jobDescription].forEach(field => {
        field.addEventListener('input', checkFormFields);
    });

    // Generate resume button click handler
    generateResumeBtn.addEventListener('click', () => {
        resultsSection.classList.add('hidden');
        emptyState.classList.add('hidden');
        templateSection.classList.remove('hidden');
        loadTemplates();
    });

    // Back to analysis button click handler
    backToAnalysisBtn.addEventListener('click', () => {
        templateSection.classList.add('hidden');
        emptyState.classList.remove('hidden');
    });

    // Modal close handlers
    closeModal.addEventListener('click', closeTemplateModal);
    useTemplateBtn.addEventListener('click', () => {
        const templateId = modalTemplateImage.src.split('/').pop().split('-')[0];
        selectTemplate(templateId);
        
        closeTemplateModal();
    });

    // Close modal when clicking outside
    templateModal.addEventListener('click', (e) => {
        if (e.target === templateModal) {
            closeTemplateModal();
        }
    });

    // Initialize slider navigation
    initSliderNavigation();

    // Rest of your existing code...
    async function loadResumes() {
        try {
            const resumes = userData.resume_data || [];
            
            // Clear existing options
            resumeSelect.innerHTML = '<option value="">-- Select a resume --</option>';
            
            // Add resume options
            resumes.forEach(resume => {
                const option = document.createElement('option');
                option.value = resume.id;
                option.textContent = resume.title;
                resumeSelect.appendChild(option);
            });
            
        } catch (error) {
            console.error('Error loading resumes:', error);
            // Show error to user
            showToast(`Error loading resumes: \n${error.message}`, 'error');
        }
    }

    // Handle form submission
    analysisForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        errorDisplay.textContent = ''; // Clear previous errors
        
        const resumeId = resumeSelect.value;
        const jobTitleValue = jobTitle.value;
        const jobDescriptionValue = jobDescription.value;
        
        // Validate inputs
        if (!resumeId || !jobTitleValue || !jobDescriptionValue) {
            errorDisplay.textContent = 'Please fill out all fields.';
            return;
        }
        
        // Show loading state
        toggleSpinner(true);

        setTimeout( async () => {
            try {
                const response = await analyzeResume(resumeId, jobTitleValue, jobDescriptionValue);
                // Check if response is empty
                if (!response || Object.keys(response).length === 0){

                } else {
                
                    // Hide empty state and show results
                    emptyState.classList.add('hidden');
                    resultsSection.classList.remove('hidden');
                    
                    // Update UI with analysis results
                    updateAnalysisResults(response);
                }
            } catch (error) {
                console.error('Analysis error:', error);
                errorDisplay.textContent = `${error.message}`;
            } finally {
                toggleSpinner(false);
            }
        }, 2000);
    });

    // Generate optimized resume button click handler
    generateOptimizedResumeBtn.addEventListener('click', async () => {
        errorDisplay.textContent = ''; // Clear previous errors

        // if user is not premium or has no resume credits, call the function that will inform them and direct them to premium page
        if (!isPremiumUser() && !hasResumeCredits()) {
            // showToast('You need to be a premium member or have resume credits to generate an optimized resume.', 'error');
            await showPremiumRequiredModal('You need resume credits or premium subscription to generate an optimized resume.');
            return;
        }

        // Check if a template is selected
        if (!selectedTemplateId) {
            errorDisplay.textContent = 'Please select a template before generating the resume.';
            return;
        }

        // Show loading state
        toggleSpinner(true, generateOptimizedResumeBtn, 'Generating Resume...');

        try {
            const resumeId = resumeSelect.value;
            const jobTitleValue = jobTitle.value;
            const jobDescriptionValue = jobDescription.value;

            if (!resumeId || !jobTitleValue || !jobDescriptionValue) {
                errorDisplay.textContent = 'Please fill out all fields.';
                return;
            }

            // Submit formData to backend
            const response = await submitResumeData({
                resume_id: parseInt(resumeId),
                job_title: jobTitleValue,
                job_description: jobDescriptionValue,
                template_id: selectedTemplateId
            });

            if (response.task_id) {
                // Poll for task completion
                const file_path = await pollTaskResult(response.task_id, {
                    interval: 2000,
                    timeout: 30000
                });

                downloadResume(file_path);
                
            } else {
                throw new Error('Invalid response from server');
            }
        } catch (error) {
            console.error('Error generating resume:', error.message);
            showToast(`Error: ${error.message}`, 'error');
        } finally {
            toggleSpinner(false, generateOptimizedResumeBtn, ' ', 'Generate Optimized Resume');
        }
    });

    // Toggle spinner state
    function toggleSpinner(show, button= analyzeBtn, processing_text = 'Analyzing...', default_text = 'Analyze Resume') {
        const spinner = button.querySelector('#spinner');
        const btnText = button.querySelector('#btn-text');

        if (show) {
            spinner.classList.remove('hidden');
            btnText.textContent = processing_text;
            button.disabled = true;
        } else {
            spinner.classList.add('hidden');
            btnText.textContent = default_text;
            button.disabled = false;
        }
    }

    async function analyzeResume(resumeId, jobTitle, jobDescription) {
        const queryData = {
            resume_id: parseInt(resumeId),
            job_title: jobTitle,
            job_description: jobDescription
        };
        try {
            const response = await API.request('/api/user/resume/analysis/', 'POST', queryData);
            
            if (!response.ok) throw new Error(response.statusText);
            const data = await response.json();
            if (data.status !== 1) throw new Error(data.message);

            // use task polling to check for analysis completion
            const taskId = data.task_id;

            const result = await pollTaskResult(taskId, {
                                interval: 5000,
                                timeout: 180000,
                            });
            return result;
            
        } catch (error) {
            console.error('Upload error: ', error);
            errorDisplay.textContent = `Error: ${error.message}`;
            return {};
        }
    }

    // Update UI with analysis results
    function updateAnalysisResults(data) {
        // Basic Analysis
        document.getElementById('ats-score-value').textContent = `${data.basic_analysis.ats_score}%`;
        document.getElementById('ats-score-circle').setAttribute('stroke-dasharray', `${data.basic_analysis.ats_score}, 100`);
        document.getElementById('ats-score-description').textContent = `Better than ${data.basic_analysis.score_comparison}% of analyzed resumes`;
        
        // Sectional Analysis
        const sectionalAnalysis = document.getElementById('sectional-analysis');
        sectionalAnalysis.innerHTML = '';
        
        for (const [section, score] of Object.entries(data.basic_analysis.sectional_analysis)) {
            const sectionEl = document.createElement('div');
            sectionEl.innerHTML = `
                <h4 class="text-sm font-medium text-gray-700 mb-1 capitalize">${section}</h4>
                <div class="w-full bg-gray-200 rounded-full h-2.5 mb-3">
                    <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${score}%"></div>
                </div>
            `;
            sectionalAnalysis.appendChild(sectionEl);
        }
        
        // Basic Suggestions
        const basicSuggestions = document.getElementById('basic-suggestions');
        basicSuggestions.innerHTML = '';
        
        data.basic_analysis.suggestions.forEach(suggestion => {
            const li = document.createElement('li');
            li.className = 'flex items-start';
            li.innerHTML = `
                <div class="flex-shrink-0 h-5 w-5 text-blue-500 mt-0.5">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                </div>
                <p class="ml-2 text-sm text-gray-700">${suggestion}</p>
            `;
            basicSuggestions.appendChild(li);
        });
        
        // Job Matching Analysis
        document.getElementById('suitability-score-value').textContent = `${data.job_matching.suitability_score}%`;
        document.getElementById('suitability-score-circle').setAttribute('stroke-dasharray', `${data.job_matching.suitability_score}, 100`);
        document.getElementById('suitability-score-description').textContent = interpretScore(parseInt(data.job_matching.suitability_score));
        
        // Keyword Coverage
        const keywordCoverage = document.getElementById('keyword-coverage');
        keywordCoverage.innerHTML = '';
        
        for (const [category, percentage] of Object.entries(data.job_matching.keyword_coverage)) {
            const coverageEl = document.createElement('div');
            coverageEl.className = 'bg-gray-50 rounded p-3 border border-gray-200';
            coverageEl.innerHTML = `
                <h4 class="text-sm font-medium text-gray-700 mb-1">${category}</h4>
                <p class="text-2xl font-bold text-indigo-600">${percentage}%</p>
            `;
            keywordCoverage.appendChild(coverageEl);
        }
        
        // Sectional Matching
        const sectionalMatching = document.getElementById('sectional-matching');
        sectionalMatching.innerHTML = '';
        
        for (const [section, details] of Object.entries(data.job_matching.sectional_matching)) {
            const sectionEl = document.createElement('div');
            sectionEl.className = 'bg-gray-50 rounded-lg p-4 border border-gray-200';
            
            let matchedList = '';
            if (details.matched && details.matched.length > 0) {
                matchedList = `
                    <div class="mt-2">
                        <span class="text-xs font-medium text-green-700">Matched:</span>
                        <div class="flex flex-wrap gap-1 mt-1">
                            ${details.matched.map(item => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">${item}</span>`).join('')}
                        </div>
                    </div>
                `;
            }
            
            let missingList = '';
            if (details.missing && details.missing.length > 0) {
                missingList = `
                    <div class="mt-2">
                        <span class="text-xs font-medium text-red-700">Missing:</span>
                        <div class="flex flex-wrap gap-1 mt-1">
                            ${details.missing.map(item => `<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-red-100 text-red-800">${item}</span>`).join('')}
                        </div>
                    </div>
                `;
            }
            
            sectionEl.innerHTML = `
                <div class="flex justify-between items-start">
                    <h4 class="text-sm font-medium text-gray-700 capitalize">${section}</h4>
                    <span class="text-xs font-medium px-2 py-0.5 rounded-full ${details.match_percentage >= 70 ? 'bg-green-100 text-green-800' : details.match_percentage >= 50 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}">
                        ${details.match_percentage}% match
                    </span>
                </div>
                ${matchedList}
                ${missingList}
            `;
            sectionalMatching.appendChild(sectionEl);
        }
        
        // Job Suggestions
        const jobSuggestions = document.getElementById('job-suggestions');
        jobSuggestions.innerHTML = '';
        
        data.job_matching.suggestions.forEach(suggestion => {
            const li = document.createElement('li');
            li.className = 'flex items-start';
            li.innerHTML = `
                <div class="flex-shrink-0 h-5 w-5 text-indigo-500 mt-0.5">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                </div>
                <p class="ml-2 text-sm text-gray-700">${suggestion}</p>
            `;
            jobSuggestions.appendChild(li);
        });

        function interpretScore(suitabilityScore) {
            if (suitabilityScore >= 90) return 'Excellent match! Go on ... ✅';
            if (suitabilityScore >= 75) return 'You\'re a strong candidate 👍';
            if (suitabilityScore >= 60) return 'Has a good potential 🤔';
            if (suitabilityScore >= 40) return 'Your resume needs more work ⚠️';
            return 'Poor match ❌';
        }
    }

    // Initial load
    loadResumes();
    checkFormFields(); // Initial check for generate button visibility
});

async function submitResumeData(formData) {
    try {
        const response = await API.request('/api/user/resumes/generate_matching/', 'POST', formData);
        if (!response.ok) throw new Error(response.statusText);
        const data = await response.json();
        if (data.user){
            //update user data
            API.setUser(data.user);
        }
        if (data.status !== 1) throw new Error(data.message);
        
        return data;
    } catch (error) {
        console.error('Error submitting resume data:', error);
        throw error;
    }
}
</script>
{% endblock %}