---
layout: base.njk
title: Forgot Password
---

<section class="hero-gradient text-white py-12">
    <div class="max-w-7xl mx-auto px-4 text-center">
        <h1 class="text-3xl md:text-4xl font-bold mb-4">Reset Your Password</h1>
        <p class="text-lg opacity-90" id="step-description">Enter your email to receive a password reset code</p>
    </div>
</section>

<section class="py-16 px-4">
    <div class="max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden p-8">
        <!-- Step 1: Email Input -->
        <form id="request-code-form" class="space-y-6">
            <div id="email-step">
                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                    <input type="email" id="email" name="email" required autocomplete="email"
                        class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                    <p id="email-error" class="mt-1 text-sm text-red-600 hidden">Please enter a valid email address</p>
                </div>

                <div id="form-error" class="hidden py-3 px-4 bg-red-50 text-red-600 rounded-md text-sm"></div>
                <div id="form-success" class="hidden py-3 px-4 bg-green-50 text-green-600 rounded-md text-sm"></div>

                <button type="submit" id="submit-btn"
                    class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <span id="btn-text">Send Reset Code</span>
                    <span id="spinner" class="spinner hidden ml-2"></span>
                </button>
            </div>
        </form>

        <!-- Step 2: Code Verification -->
        <form id="verify-code-form" class="space-y-6 hidden">
            <div>
                <p class="text-sm text-gray-600 mb-4">We've sent a 6-digit code to <span id="user-email" class="font-medium"></span></p>
                
                <div class="flex justify-between space-x-2 mb-6">
                    <input type="text" id="code1" maxlength="1" class="w-12 h-12 text-center border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" pattern="\d*">
                    <input type="text" id="code2" maxlength="1" class="w-12 h-12 text-center border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" pattern="\d*">
                    <input type="text" id="code3" maxlength="1" class="w-12 h-12 text-center border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" pattern="\d*">
                    <input type="text" id="code4" maxlength="1" class="w-12 h-12 text-center border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" pattern="\d*">
                    <input type="text" id="code5" maxlength="1" class="w-12 h-12 text-center border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" pattern="\d*">
                    <input type="text" id="code6" maxlength="1" class="w-12 h-12 text-center border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" pattern="\d*">
                </div>
                
                <div id="code-error" class="hidden py-3 px-4 bg-red-50 text-red-600 rounded-md text-sm mb-4"></div>
                
                <button type="submit" id="verify-btn"
                    class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <span id="verify-btn-text">Verify Code</span>
                    <span id="verify-spinner" class="spinner hidden ml-2"></span>
                </button>
                
                <p class="text-center text-sm text-gray-500 mt-4">
                    Didn't receive code? <button id="resend-code" type="button" class="text-blue-600 hover:text-blue-800">Resend</button>
                </p>
            </div>
        </form>

        <!-- Step 3: New Password -->
        <form id="new-password-form" class="space-y-6 hidden">
            <div>
                <label for="new_password" class="block text-sm font-medium text-gray-700 mb-1">New Password</label>
                <input type="password" id="new_password" name="new_password" required minlength="8"
                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                <p class="mt-1 text-xs text-gray-500">Minimum 8 characters</p>
            </div>

            <div>
                <label for="confirm_password" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
                <input type="password" id="confirm_password" name="confirm_password" required minlength="8"
                    class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500">
                <p id="password-match-error" class="mt-1 text-sm text-red-600 hidden">Passwords do not match</p>
            </div>

            <div id="password-error" class="hidden py-3 px-4 bg-red-50 text-red-600 rounded-md text-sm"></div>

            <button type="submit" id="reset-btn"
                class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                <span id="reset-btn-text">Change Password</span>
                <span id="reset-spinner" class="spinner hidden ml-2"></span>
            </button>
        </form>

        <div class="text-center text-sm text-gray-500 mt-6">
            Remember your password? <a href="/login" class="text-blue-600 hover:text-blue-800">Sign in</a>
        </div>
    </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Elements
    const requestCodeForm = document.getElementById('request-code-form');
    const verifyCodeForm = document.getElementById('verify-code-form');
    const newPasswordForm = document.getElementById('new-password-form');
    const emailInput = document.getElementById('email');
    const userEmailDisplay = document.getElementById('user-email');
    const codeInputs = Array.from({length: 6}, (_, i) => document.getElementById(`code${i+1}`));
    const newPassword = document.getElementById('new_password');
    const confirmPassword = document.getElementById('confirm_password');
    const stepDescription = document.getElementById('step-description');
    
    // State
    let currentEmail = '';
    let resetToken = '';

    // Step 1: Request Code
    requestCodeForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const email = emailInput.value.trim();
        if (!validateEmail(email)) {
            showToast('Please enter a valid email address', 'error');
            return;
        }

        toggleButtonSpinner('submit-btn', 'Send Reset Code', true);
        await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate 2 seconds delay
        
        try {
            const response = await API.request(`/api/auth/request-password-reset/${email}`, 'GET');
            if (!response.ok) {
                throw new Error(response.statusText || 'Network error');
            }
            const data = await response.json();
            
            if (data.status !== 1) {
                throw new Error(data.message || 'Failed to send reset code');
            }

            // Store email and move to next step
            currentEmail = email;
            userEmailDisplay.textContent = email;
            showStep(2);
            showToast('Reset code sent to your email', 'success');
            
        } catch (error) {
            showToast(error.message, 'error');
        } finally {
            toggleButtonSpinner('submit-btn', 'Send Reset Code', false);
        }
    });

    // Step 2: Verify Code
    verifyCodeForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const code = codeInputs.map(input => input.value).join('');
        if (code.length !== 6) {
            showToast('Please enter the full 6-digit code', 'error');
            return;
        }

        toggleButtonSpinner('verify-btn', 'Verify Code', true);
        await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate 2 seconds delay
        
        try {
            const response = await API.request(`/api/auth/request-password-reset/${currentEmail}/`, 'POST', {
                email: currentEmail,
                reset_code: code
            });

            if (!response.ok) {
                throw new Error(response.statusText || 'Network error');
            }
            
            const data = await response.json();
            
            if (data.status !== 1) {
                throw new Error(data.message || 'Invalid verification code');
            }

            // Store token and move to password reset
            resetToken = data.token;
            showStep(3);
            showToast('Code verified successfully', 'success');
            
        } catch (error) {
            showToast(error.message, 'error');
        } finally {
            toggleButtonSpinner('verify-btn', 'Verify Code', false);
        }
    });

    // Step 3: Reset Password
    newPasswordForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (newPassword.value !== confirmPassword.value) {
            showToast('Passwords do not match', 'error');
            return;
        }

        if (newPassword.value.length < 8) {
            showToast('Password must be at least 8 characters', 'error');
            return;
        }

        // check that password contains at least one upper case letter, one lower case letter, one number and one special character
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@#$!%*?&])[A-Za-z\d@#$!%*?&]{8,}$/;
        if (!passwordRegex.test(newPassword.value)) {
            showToast('Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character', 'error');
            return;
        }

        toggleButtonSpinner('reset-btn', 'Change Password', true);
        await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate 2 seconds delay
        
        try {
            const response = await API.request(`/api/auth/request-password-reset/${currentEmail}/`, 'PUT', {
                token: resetToken,
                new_password: newPassword.value
            });
            if (!response.ok) {
                throw new Error(response.statusText || 'Network error');
            }
            
            const data = await response.json();
            
            if (data.status !== 1) {
                throw new Error(data.message || 'Password reset failed');
            }

            showToast('Password reset successfully! Redirecting to login...', 'success');
            // Redirect to login with success message
            setTimeout(() => {
                window.location.href = '/login?reset_success=1';
            }, 1500);
            
        } catch (error) {
            showToast(error.message, 'error');
        } finally {
            toggleButtonSpinner('reset-btn', 'Change Password', false);
        }
    });

    // Resend Code
    document.getElementById('resend-code').addEventListener('click', async () => {
        try {
            const response = await API.request(`/api/auth/request-password-reset/${currentEmail}`, 'GET');
            const data = await response.json();
            
            if (!response.ok || data.status !== 1) {
                throw new Error(data.message || 'Failed to resend code');
            }
            
            showToast('New code sent successfully', 'success');
        } catch (error) {
            showToast(error.message, 'error');
        }
    });

    // Helper functions
    function showStep(step) {
        document.getElementById('email-step').classList.toggle('hidden', step !== 1);
        requestCodeForm.classList.toggle('hidden', step !== 1);
        verifyCodeForm.classList.toggle('hidden', step !== 2);
        newPasswordForm.classList.toggle('hidden', step !== 3);
        
        if (step === 1) stepDescription.textContent = 'Enter your email to receive a password reset code';
        if (step === 2) stepDescription.textContent = 'Enter the 6-digit code sent to your email';
        if (step === 3) stepDescription.textContent = 'Create a new password for your account';
    }

    function validateEmail(email) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    // Auto-tab between code inputs
    codeInputs.forEach((input, index) => {
        input.addEventListener('input', () => {
            if (input.value.length === 1 && index < codeInputs.length - 1) {
                codeInputs[index + 1].focus();
            }
        });
        
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Backspace' && input.value.length === 0 && index > 0) {
                codeInputs[index - 1].focus();
            }
        });
    });
});
</script>